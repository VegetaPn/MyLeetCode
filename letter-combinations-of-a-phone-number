class Solution {
    private Map<Integer, List<Character>> phoneKeys = new HashMap();
    
    {
        phoneKeys.put(2, Arrays.asList('a', 'b', 'c'));
        phoneKeys.put(3, Arrays.asList('d', 'e', 'f'));
        phoneKeys.put(4, Arrays.asList('g', 'h', 'i'));
        phoneKeys.put(5, Arrays.asList('j', 'k', 'l'));
        phoneKeys.put(6, Arrays.asList('m', 'n', 'o'));
        phoneKeys.put(7, Arrays.asList('p', 'q', 'r', 's'));
        phoneKeys.put(8, Arrays.asList('t', 'u', 'v'));
        phoneKeys.put(9, Arrays.asList('w', 'x', 'y', 'z'));
    }
    
    public List<String> letterCombinations(String digits) {
        if (digits.length() == 0) {
            return new ArrayList();
        }
        
        List<List<Character>> combs = new ArrayList();
        for (int i = 0; i < digits.length(); i++) {
            Integer digit = Integer.valueOf(digits.charAt(i) - '0');
            combs.add(phoneKeys.getOrDefault(digit, new ArrayList()));
        }
        
        List<String> result = new ArrayList();
        result.add("");
        for (int i = 0; i < combs.size(); i++) {
            result = combine(combs.get(i), result);
        }
        return result;
    }
    
    private List<String> combine(List<Character> aRow, List<String> result) {
        List<String> combined = new ArrayList();
        for (int i = 0; i < aRow.size(); i++) {
            for (int j = 0; j < result.size(); j++) {
                combined.add(result.get(j) + aRow.get(i));
            }
        }
        return combined;
    }
}