/**
 * 33. Search in Rotated Sorted Array
 * 
    Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

    (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

    You are given a target value to search. If found in the array return its index, otherwise return -1.

    You may assume no duplicate exists in the array.

    Your algorithm's runtime complexity must be in the order of O(log n).

    Example 1:

    Input: nums = [4,5,6,7,0,1,2], target = 0
    Output: 4
    Example 2:

    Input: nums = [4,5,6,7,0,1,2], target = 3
    Output: -1
 * 
 */

class Solution {
    public int search(int[] nums, int target) {
        if (nums.length == 0) {
            return -1;
        }
        if (nums.length == 1) {
            return nums[0] == target ? 0 : -1;
        }
        
        int p = findMid(nums);
        int r1 = bsearch(nums, 0, p-1, target);
        int r2 = bsearch(nums, p, nums.length-1, target);
        
        if (r1 == -1) {
            return r2;
        }
        if (r2 == -1) {
            return r1;
        }
        return -1;
    }
    
    private int findMid(int[] nums) {
        int lo = 0, hi = nums.length - 1;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (nums[mid] > nums[hi]) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
    
    private int bsearch(int[] nums, int lo, int hi, int val) {
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;  
            if (nums[mid] < val) {
                lo = mid + 1;
            } else if (nums[mid] > val) {
                hi = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
}