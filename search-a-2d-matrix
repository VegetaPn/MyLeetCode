/**
 * 74. Search a 2D Matrix
 * 
    Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

    Integers in each row are sorted from left to right.
    The first integer of each row is greater than the last integer of the previous row.
    Example 1:

    Input:
    matrix = [
    [1,   3,  5,  7],
    [10, 11, 16, 20],
    [23, 30, 34, 50]
    ]
    target = 3
    Output: true
    Example 2:

    Input:
    matrix = [
    [1,   3,  5,  7],
    [10, 11, 16, 20],
    [23, 30, 34, 50]
    ]
    target = 13
    Output: false
 */

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        
        int m = matrix.length;
        int n = matrix[0].length;
        if (matrix[0][0] > target || matrix[m-1][n-1] < target) {
            return false;
        }
        
        int r = findLatestRow(matrix, target);
        return find(matrix[r], target);
    }
    
    private int findLatestRow(int[][] matrix, int target) {
        int lo = 0;
        int hi = matrix.length-1;
        
        while (true) {
            int mid = lo + (hi-lo)/2;
            if (matrix[mid][0] == target) {
                return mid;
            }
            if (matrix[mid][0] < target) {
                if (mid+1 >= matrix.length) {
                    return mid;
                } else if (matrix[mid+1][0] > target) {
                    return mid;
                } else {
                    lo = mid + 1;
                }
            } else {
                hi = mid - 1;
            }
        }
    }
    
    private boolean find(int[] row, int target) {
        int lo = 0, hi = row.length-1;
        while (lo <= hi) {
            int mid = lo + (hi-lo)/2;
            if (row[mid] == target) {
                return true;
            } else if (row[mid] < target) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return false;
    }
}